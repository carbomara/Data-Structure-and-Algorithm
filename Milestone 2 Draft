import java.util.*;
import java.text.*;
import java.io.*;

public class DSAMilestone2 {

    // Class to represent a stock item
    static class Stock {
        String dateEntered;
        String status;
        String brand;
        String engineNumber;
        String purchaseStatus;

        public Stock(String dateEntered, String status, String brand, String engineNumber, String purchaseStatus) {
            this.dateEntered = dateEntered;
            this.status = status;
            this.brand = brand;
            this.engineNumber = engineNumber;
            this.purchaseStatus = purchaseStatus;
        }

        @Override
        public String toString() {
            return "Date: " + dateEntered + ", Status: " + status + ", Brand: " + brand + ", Engine Number: " + engineNumber + ", Purchase Status: " + purchaseStatus;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // LinkedList to manage inventory
        LinkedList<Stock> inventory = new LinkedList<>();

        // Stack for undo functionality
        Stack<Stock> undoStack = new Stack<>();

        // Load initial data from the CSV file
        loadInventoryFromCSV(inventory, "C:\\Users\\Administrator\\IdeaProjects\\MotorPH\\src\\datadsa.csv");

        while (true) {
            System.out.println("\nMotorPH Inventory System");
            System.out.println("1. Add New Stock");
            System.out.println("2. Manage Stocks (Delete/Undo)");
            System.out.println("3. Sort, Search, and Count by Brand");
            System.out.println("4. Display Inventory and Summary");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    // Add new stock with system date as default
                    String date = new SimpleDateFormat("MM/dd/yyyy").format(new Date()); // Get system date
                    String engineNumber;
                    boolean exists;

                    // Validate engine number first
                    do {
                        System.out.print("Enter Engine Number: ");
                        engineNumber = scanner.nextLine();

                        // Check if engine number already exists
                        exists = false;
                        for (Stock stock : inventory) {
                            if (stock.engineNumber.equals(engineNumber)) {
                                exists = true;
                                break;
                            }
                        }

                        if (exists) {
                            System.out.println("Engine Number already exists. Try again or return to menu.");
                            System.out.print("Do you want to enter a new Engine Number? (yes/no): ");
                            String response = scanner.nextLine().trim().toLowerCase();
                            if (!response.equals("yes")) {
                                return; // Return to menu if user doesn't want to re-enter
                            }
                        }
                    } while (exists);

                    // Proceed to enter brand after validation
                    System.out.print("Enter Brand: ");
                    String brand = scanner.nextLine();

                    // Assign default values
                    String status = "New";
                    String purchaseStatus = "On-Hand";

                    // Create new stock entry
                    Stock newStock = new Stock(date, status, brand, engineNumber, purchaseStatus);

                    // Add to inventory
                    inventory.add(newStock);

                    // Push to undo stack
                    undoStack.push(newStock);

                    System.out.println("Stock added successfully! Details: " + newStock);
                    break;

                case 2:
                    // Manage stocks (delete or undo last added stock)
                    while (true) {
                        System.out.println("1. Delete Stock");
                        System.out.println("2. Undo Last Added Stock");
                        System.out.print("Choose an option: ");
                        int manageChoice = scanner.nextInt();
                        scanner.nextLine(); // Consume newline

                        if (manageChoice == 1) {
                            // Delete stock by engine number with confirmation
                            while (true) {
                                System.out.print("Enter Engine Number to Delete: ");
                                String engineToDelete = scanner.nextLine();
                                Stock stockToDelete = null;
                                for (Stock stock : inventory) {
                                    if (stock.engineNumber.equals(engineToDelete)) {
                                        stockToDelete = stock;
                                        break;
                                    }
                                }
                                if (stockToDelete != null) {
                                    System.out.println("Are you sure you want to delete this stock? " + stockToDelete + " (yes/no)");
                                    String confirmation = scanner.nextLine().trim().toLowerCase();
                                    if (confirmation.equals("yes")) {
                                        inventory.remove(stockToDelete);
                                        System.out.println("Stock deleted successfully.");
                                    } else {
                                        System.out.println("Stock deletion canceled.");
                                    }
                                } else {
                                    System.out.println("No stock found with the given engine number. Please enter a valid engine number.\n");
                                }

                                // Ask if the user wants to delete another stock
                                System.out.print("Do you want to delete another stock? (yes/no): ");
                                String deleteAnother = scanner.nextLine().trim().toLowerCase();
                                if (!deleteAnother.equals("yes")) {
                                    break; // Exit delete loop
                                }
                            }
                        } else if (manageChoice == 2) {
                            // Undo last added stock
                            if (!undoStack.isEmpty()) {
                                Stock lastAdded = undoStack.pop();
                                inventory.remove(lastAdded);
                                System.out.println("Last added stock has been undone:");
                                System.out.println(lastAdded);
                            } else {
                                System.out.println("No actions to undo.");
                            }
                        } else {
                            System.out.println("Invalid option. Returning to main menu.");
                        }

                        // Exit manage stocks loop
                        break;
                    }
                    break;

                case 3:
                    do {
                        // Search and count by brand
                        System.out.println("Sort by Brand:");
                        //HashSet Implementation
                        Set<String> brands = new HashSet<>();
                        for (Stock stock : inventory) {
                            brands.add(stock.brand);
                        }
                        int i = 1;
                        // ArrayList Implementation
                        List<String> brandList = new ArrayList<>(brands);
                        for (String brandName : brandList) {
                            System.out.println(i + ". " + brandName);
                            i++;
                        }
                        System.out.print("Enter Brand: ");
                        int brandIndex = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        if (brandIndex > 0 && brandIndex <= brandList.size()) {
                            String filterBrand = brandList.get(brandIndex - 1);
                            List<Stock> filtered = filterByBrand(inventory, filterBrand);
                            System.out.println("Stocks for brand: " + filterBrand);
                            displayInventory(filtered);
                            System.out.println("Total: " + filtered.size());
                            int onHandCount = 0, soldCount = 0;
                            for (Stock stock : filtered) {
                                if (stock.purchaseStatus.equalsIgnoreCase("On-hand")) {
                                    onHandCount++;
                                } else if (stock.purchaseStatus.equalsIgnoreCase("Sold")) {
                                    soldCount++;
                                }
                            }
                            System.out.println("On-hand: " + onHandCount);
                            System.out.println("Sold: " + soldCount);
                        } else {
                            System.out.println("Invalid selection.");
                        }

                        // Step 2: Search by Engine Number
                        System.out.print("Do you want to search for a specific engine number? (yes/no): ");
                        String searchChoice = scanner.nextLine().trim().toLowerCase();
                        if (searchChoice.equals("yes")) {
                            System.out.print("Enter Engine Number to Search: ");
                            String searchEngine = scanner.nextLine();

                            // Ensure inventory is sorted before performing binary search
                            mergeSort(inventory, 0, inventory.size() - 1);

                            int index = binarySearch(inventory, searchEngine);
                            if (index != -1) {
                                System.out.println("Stock found: " + inventory.get(index));
                            } else {
                                System.out.println("No stock found with the given engine number.");
                            }
                        }

                        System.out.print("Do you want to search again? (yes/no): ");
                    } while (scanner.nextLine().trim().equalsIgnoreCase("yes"));


                case 4:
                    // Display inventory and summary
                    if (inventory.isEmpty()) {
                        System.out.println("Inventory is empty.");
                    } else {
                        displayInventory(inventory);
                        displaySummary(inventory);
                    }
                    break;

                case 5:
                    // Exit program
                    System.out.println("Exiting program. Goodbye!");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    // Load inventory from CSV file
    // LinkedList Implementation
    public static void loadInventoryFromCSV(LinkedList<Stock> inventory, String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            br.readLine(); // Skip header
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 5) { // Ensure the row has exactly 5 columns
                    inventory.add(new Stock(data[0], data[1], data[2], data[3], data[4]));
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV file: " + e.getMessage());
        }
    }

    // Merge Sort implementation
    public static void mergeSort(List<Stock> inventory, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(inventory, left, mid);
            mergeSort(inventory, mid + 1, right);
            merge(inventory, left, mid, right);
        }
    }

    // Merge helper for Merge Sort
    public static void merge(List<Stock> inventory, int left, int mid, int right) {
        List<Stock> temp = new ArrayList<>();
        int i = left, j = mid + 1;

        while (i <= mid && j <= right) {
            if (inventory.get(i).engineNumber.compareTo(inventory.get(j).engineNumber) <= 0) {
                temp.add(inventory.get(i++));
            } else {
                temp.add(inventory.get(j++));
            }
        }

        while (i <= mid) {
            temp.add(inventory.get(i++));
        }

        while (j <= right) {
            temp.add(inventory.get(j++));
        }

        for (i = left; i <= right; i++) {
            inventory.set(i, temp.get(i - left));
        }
    }

    // Binary Search implementation
    public static int binarySearch(List<Stock> inventory, String engineNumber) {
        int left = 0, right = inventory.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            int comparison = inventory.get(mid).engineNumber.compareTo(engineNumber);
            if (comparison == 0) {
                return mid;
            } else if (comparison < 0) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }

    // Linear Search Implementation
    public static List<Stock> filterByBrand(List<Stock> inventory, String brand) {
        List<Stock> filtered = new ArrayList<>();
        for (Stock stock : inventory) {
            if (stock.brand.equalsIgnoreCase(brand)) {
                filtered.add(stock);
            }
        }
        return filtered;
    }

    // Display inventory with numbering
    public static void displayInventory(List<Stock> inventory) {
        int index = 1;
        for (Stock stock : inventory) {
            System.out.println(index + ". " + stock);
            index++;
        }
    }

    // Display inventory summary
    // Counting Implementation
    public static void displaySummary(List<Stock> inventory) {
        int onHandCount = 0, soldCount = 0;

        // Count On-hand and Sold stocks
        for (Stock stock : inventory) {
            if (stock.purchaseStatus.equalsIgnoreCase("On-hand")) {
                onHandCount++;
            } else if (stock.purchaseStatus.equalsIgnoreCase("Sold")) {
                soldCount++;
            }
        }

        System.out.println(" Summary:");
        System.out.println("Total Stocks: " + inventory.size());
        System.out.println("On-hand: " + onHandCount);
        System.out.println("Sold: " + soldCount);
    }
}
